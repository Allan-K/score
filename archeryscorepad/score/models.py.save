
from django.contrib.auth.models import AbstractUser
from django.db import models
from django.db.models.deletion import CASCADE
from django.utils import timezone
from datetime import datetime

class ProfileUser(AbstractUser):
    GENDER_CHOICES = (
        ('F', 'Female',),
        ('M', 'Male',),
    )
    gender = models.CharField(max_length=1, default="M", choices=GENDER_CHOICES)
    DoB = models.DateField(verbose_name="Date of Birth", null=True, help_text="Date of Birth must take the form dd/mm/yyyy")
    club = models.ForeignKey('club', null=True, blank=True, on_delete=models.CASCADE)

    def calculate_age(self):
        return int((datetime.now().date() - self.DoB).days / 365.25)
    age = property(calculate_age) 

    def calculate_shootingas(self):
        if self.gender == 'F':
            if self.age >= 18:
                return 1
            elif self.age <= 18 and self.age >= 17:
                return 2
            elif self.age <= 16 and self.age >= 15:
                return 3
            elif self.age <= 14 and self.age >= 13 :
                return 4
            elif self.age <= 12:
                return 5
        if self.gender == 'M':
            if self.age >= 18:
                return 6
            elif self.age <= 18 and self.age >= 17:
                return 7
            elif self.age <= 16 and self.age >= 15:
                return 8
            elif self.age <= 14 and self.age >= 13:
                return 9
            elif self.age <= 12:
                return 10
    shooting = property(calculate_shootingas)

^X
#    def save(self, *args, **kwargs):
#       self.shooting_age = self.shooting  
#       super(ProfileUser, self).save(*args, **kwargs)   

class BowType(models.Model) :

    bowtype = models.CharField(max_length=10)

    def __str__(self):
        return str(self.bowtype)

class Round(models.Model):
    roundname = models.CharField(max_length=200)
    maxscore = models.IntegerField(default=0)
    type = models.CharField(max_length=1, default='M')

    class Meta:
        ordering = ['id']

    def __str__(self):
        return str(self.roundname)

#class RoundType(models.Model):
#    rndtype = models.CharField(max_length=7)

#    def __str__(self):
#        return str(self.rndtype)


class Age(models.Model):
    ageband = models.CharField(max_length=14)
    maxage = models.IntegerField(verbose_name="Age Range")
    gender = models.CharField(max_length=1)

    def __str__(self):
        return str(self.ageband)

class Classification(models.Model):
    age = models.ForeignKey('Age', related_name='shooting', on_delete=models.CASCADE)
    bowtype = models.ForeignKey("BowType", verbose_name='bows', on_delete=models.CASCADE) 
    roundname = models.ForeignKey('Round', verbose_name='round', on_delete=models.CASCADE)   
#    round = models.ForeignKey('RoundType', related_name='roundtype', on_delete=models.CASCADE)
    third = models.IntegerField(default='', verbose_name="3rd Class Bowman", null=True, blank=True)
    second = models.IntegerField(default='', verbose_name="2nd Class Bowman",  null=True, blank=True)
    first = models.IntegerField(default='', verbose_name="1st Class Bowman",  null=True, blank=True)
    BM = models.IntegerField(default='', verbose_name="Bowman",  null=True, blank=True)
    MB = models.IntegerField(default='', verbose_name="Master Bowman",  null=True, blank=True)
    GMB = models.IntegerField(default='', verbose_name="Grand Master Bowman",  null=True, blank=True)
    classindex = models.CharField(max_length=5, null=True)

    class Meta:
        ordering = ['bowtype', 'age', 'id']

    def index(self):
        return str(self.age.ageband)+ ' ' +str(self.bowtype.bowtype)+ ' ' +str(self.roundname.roundname)
    index = property(index) 

    def save(self, *args, **kwargs):
       self.classindex = self.index  
       super(Classification, self).save(*args, **kwargs)   

    def __str__(self):
        return self.index


class Handicap(models.Model): 
    handicap = models.IntegerField(primary_key=True)
    WA1440_Gents = models.IntegerField(default='', blank=True, null=True)
    WA1440_Ladies = models.IntegerField(default='', blank=True, null=True)
    Half_WA1440_Gents = models.IntegerField(default='', blank=True, null=True)
    Half_WA1440_Ladies = models.IntegerField(default='', blank=True, null=True)
    Metric_I = models.IntegerField(default='', blank=True, null=True)
    Metric_II = models.IntegerField(default='', blank=True, null=True)
    Metric_III = models.IntegerField(default='', blank=True, null=True)
    Metric_IV = models.IntegerField(default='', blank=True, null=True)
    Metric_V = models.IntegerField(default='', blank=True, null=True)
    Long_Metric_Gents = models.IntegerField(default='', blank=True, null=True)
    Long_Metric_Ladies = models.IntegerField(default='', blank=True, null=True)
    Long_Metric_II = models.IntegerField(default='', blank=True, null=True)
    Long_Metric_III = models.IntegerField(default='', blank=True, null=True)
    Long_Metric_IV = models.IntegerField(default='', blank=True, null=True)
    Long_Metric_V = models.IntegerField(default='', blank=True, null=True)
    Short_Metric = models.IntegerField(default='', blank=True, null=True)
    Short_Metric_II = models.IntegerField(default='', blank=True, null=True)
    Short_Metric_III = models.IntegerField(default='', blank=True, null=True)
    Short_Metric_IV = models.IntegerField(default='', blank=True, null=True)
    Short_Metric_V = models.IntegerField(default='', blank=True, null=True)
    WA_900 = models.IntegerField(default='', blank=True, null=True)
    WA_70M = models.IntegerField(default='', blank=True, null=True)
    WA_60M = models.IntegerField(default='', blank=True, null=True)
    WA_50M = models.IntegerField(default='', blank=True, null=True)
    WA_Standard_Bow = models.IntegerField(default='', blank=True, null=True)
    Olympic_Match = models.IntegerField(default='', blank=True, null=True)
    York = models.IntegerField(default='', blank=True, null=True)
    Hereford = models.IntegerField(default='', blank=True, null=True)
    Bristol_II = models.IntegerField(default='', blank=True, null=True)
    Bristol_III = models.IntegerField(default='', blank=True, null=True)
    Bristol_IV = models.IntegerField(default='', blank=True, null=True)
    Bristol_V = models.IntegerField(default='', blank=True, null=True)
    St_George = models.IntegerField(default='', blank=True, null=True)
    Albion = models.IntegerField(default='', blank=True, null=True)
    Windsor = models.IntegerField(default='', blank=True, null=True)
    Short_Windsor = models.IntegerField(default='', blank=True, null=True)
    Junior_Windsor = models.IntegerField(default='', blank=True, null=True)
    Short_Junior_Windsor = models.IntegerField(default='', blank=True, null=True)
    New_Western = models.IntegerField(default='', blank=True, null=True)
    Long_Western = models.IntegerField(default='', blank=True, null=True)
    Western = models.IntegerField(default='', blank=True, null=True)
    Short_Western = models.IntegerField(default='', blank=True, null=True)
    Junior_Western = models.IntegerField(default='', blank=True, null=True)
    Short_Junior_Western = models.IntegerField(default='', blank=True, null=True)
    American = models.IntegerField(default='', blank=True, null=True)
    St_Nicholas = models.IntegerField(default='', blank=True, null=True)
    New_National = models.IntegerField(default='', blank=True, null=True)
    Long_National = models.IntegerField(default='', blank=True, null=True)
    National = models.IntegerField(default='', blank=True, null=True)
    Short_National = models.IntegerField(default='', blank=True, null=True)
    Junior_National = models.IntegerField(default='', blank=True, null=True)
    Short_Junior_National = models.IntegerField(default='', blank=True, null=True)
    New_Warwick = models.IntegerField(default='', blank=True, null=True)
    Long_Warwick = models.IntegerField(default='', blank=True, null=True)
    Warwick = models.IntegerField(default='', blank=True, null=True)
    Short_Warwick = models.IntegerField(default='', blank=True, null=True)
    Junior_Warwick = models.IntegerField(default='', blank=True, null=True)
    Short_Junior_Warwick = models.IntegerField(default='', blank=True, null=True)
 
    class Meta:
        ordering = ['handicap']

    def __str__(self):
        return str(self.handicap) 


class Score(models.Model):
    archer = models.ForeignKey('ProfileUser', related_name='scores', on_delete=CASCADE)
    rndname = models.ForeignKey('Round', default=1, related_name='round', on_delete=CASCADE)
    #shootingas = models.ForeignKey('Age',on_delete=models.CASCADE)
    bowtype = models.ForeignKey('BowType', default=1, on_delete=CASCADE)
    score = models.IntegerField(default=0)
    dateshot = models.DateField(verbose_name="Date Round Shot", default=timezone.now)
    created_date = models.DateTimeField(default=timezone.now)
    pass 

class club(models.Model):
    club_name = models.CharField(max_length=200, default='', blank=True, null=True)
    region = models.CharField(max_length=200, default='', blank=True, null=True)

    class Meta:
        ordering = ['club_name']

    def __str__(self):
        return str(self.club_name) + ' - ' + str(self.region)

